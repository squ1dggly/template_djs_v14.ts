{
    "DJS Command (SLSH)": {
        "scope": "typescript",
        "prefix": "cmd-slash",
        "description": "A slash command template.",
        "body": [
            "import { SlashCommand } from \"@customTypes/commands\";\n",

            "import { SlashCommandBuilder } from \"discord.js\";",
            "import { BetterEmbed } from \"@utils/discordTools\";",
            "import jt from \"@utils/jsTools\";\n",

            "export const __command: SlashCommand = {",
            "    category: \"Fun\",",
            "    options: { emoji: \"🍪\" },\n",

            "    builder: new SlashCommandBuilder()",
            "        .setName(\"${1:cookie}\")",
            "        .setDescription(\"${2:Get a cookie or a glass of milk.}\"),\n",

            "    execute: async (client, interaction) => {",
            "        // Create an array of responses",
            "        let choices = [",
            "            \"What's up, **\\$USER_NAME**! Have a cookie! :cookie:\",",
            "            \"Hey, **\\$USER_NAME**! Have a glass of milk! :milk:\"",
            "        ];\n",

            "        // Create the embed ( Cookie )",
            "        let embed_${1:cookie} = new BetterEmbed({",
            "            context: { interaction },",
            "            description: jt.choice(choices)",
            "        });\n",

            "        // Reply to the interaction with the embed",
            "        return await embed_${1:cookie}.send(interaction);$0",
            "    }",
            "};\n"
        ]
    },

    "DJS Command (CMD)": {
        "scope": "typescript",
        "prefix": "cmd-prefix",
        "description": "A prefix command template.",
        "body": [
            "import { PrefixCommand } from \"@customTypes/commands\";\n",

            "import { BetterEmbed } from \"@utils/discordTools\";",
            "import jt from \"@utils/jsTools\";\n",

            "export const __command: PrefixCommand = {",
            "    name: \"${1:cookie}\",",
            "    description: \"${2:Get a cookie or a glass of milk.}\",",
            "    category: \"Fun\",",
            "    options: { emoji: \"🍪\" },\n",

            "    execute: async (client, message, { }) => {",
            "        // Create an array of responses",
            "        let choices = [",
            "            \"What's up, **\\$USER_NAME**! Have a cookie! :cookie:\",",
            "            \"Hey, **\\$USER_NAME**! Have a glass of milk! :milk:\"",
            "        ];\n",

            "        // Create the embed ( Cookie )",
            "        let embed_${1:cookie} = new BetterEmbed({",
            "            context: { message },",
            "            description: jt.choice(choices)",
            "        });\n",

            "        // Reply to the message with the embed",
            "        return await embed_${1:cookie}.send(message, { allowedMentions: { repliedUser: false } });$0",
            "    }",
            "};\n"
        ]
    },

    "DJS Command (CTX)": {
        "scope": "typescript",
        "prefix": "cmd-ctx",
        "description": "A context menu command template.",
        "body": [
            "import { ContextMenuCommand } from \"@customTypes/commands\";\n",

            "import { ApplicationCommandType, ContextMenuCommandBuilder } from \"discord.js\";",
            "import { BetterEmbed } from \"@utils/discordTools\";\n",

            "export const __command: ContextMenuCommand = {",
            "    category: \"Fun\",\n",

            "    builder: new ContextMenuCommandBuilder().setName(\"${1:View Avatar}\")",
            "        .setType(ApplicationCommandType.${2|User,Message|}),\n",

            "    execute: async (client, interaction) => {",
            "        // Defines the type of context menu command",
            "        if (!interaction.is${2|User,Message|}ContextMenuCommand()) return;\n",

            "        // Create the embed ( Avatar )",
            "        let embed_${4:avatar} = new BetterEmbed({",
            "            title: `${interaction.${3|targetUser,targetMessage.member?.user|}.username}'s Avatar`,",
            "            imageURL: interaction.${3|targetUser,targetMessage.member?.user|}.displayAvatarURL({ size: 4096 })",
            "        });\n",

            "        // Reply to the interaction with the embed",
            "        return await embed_${4:avatar}.send(interaction);$0",
            "    }",
            "};\n"
        ]
    },

    "DJS Command (UI)": {
        "scope": "typescript",
        "prefix": "cmd-ui",
        "description": "A user installable command template.",
        "body": [
            "import { UserInstallableCommand } from \"@customTypes/commands\";\n",

            "import { SlashCommandBuilder } from \"discord.js\";",
            "import { BetterEmbed } from \"@utils/discordTools\";",
            "import jt from \"@utils/jsTools\";\n",

            "export const __command: UserInstallableCommand = {",
            "    builder: new SlashCommandBuilder()",
            "        .setName(\"${1:pick}\")",
            "        .setDescription(\"${2:Have me make that decision for you. Separate by comma.}\")\n",

            "        .addStringOption(option =>",
            "            option.setName(\"choices\").setDescription(\"Choices to choose from (separate by comma).\").setRequired(true)",
            "        ),\n",

            "    type: 1,",
            "    integration_types: [0, 1],",
            "    contexts: [0, 1, 2],\n",

            "    execute: async (client, interaction) => {",
            "        // Get the user's choices from the interaction",
            "        let choices = interaction.options.get(\"choices\", true).value as string;\n",

            "        // Create the embed ( Pick )",
            "        let embed_${1:pick} = new BetterEmbed({",
            "            context: { interaction },",
            "            description: jt.choice(choices.split(\",\")).trim()",
            "        });\n",

            "        // Reply to the interaction with the embed",
            "        return await embed_${1:pick}.send(interaction);$0",
            "    }",
            "};\n"
        ]
    }
}
